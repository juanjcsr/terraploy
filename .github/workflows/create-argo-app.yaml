name: build docker image
on: [push]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_to_build: ${{ steps.get_diff.outputs.image_to_build }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
    
    - name: get diff from definition file
      id: get_diff
      run: |
        git diff --name-only ${{ github.event.before }} ${{ github.sha }} > diff.txt
        echo "image_to_build=$(cat diff.txt | grep '^apps/' | awk -F/ '{print $2}' | sort | uniq)" >> $GITHUB_OUTPUT
        echo $image_to_build
        
    - name: Build Docker Image
      run: |
        IMAGE_TO_BUILD=$(cat diff.txt | grep '^apps/' | awk -F/ '{print $2}' | sort | uniq)
        echo "image_to_build=$(echo $IMAGE_TO_BUILD)" >> $GITHUB_ENV
        echo ${{  steps.get_diff.outputs.image_to_build }}
        docker build -t ${{ env.DOCKERHUB_USERNAME }}/$IMAGE_TO_BUILD:$GITHUB_SHA -f apps/$IMAGE_TO_BUILD/Dockerfile apps/$IMAGE_TO_BUILD
      if: |
        steps.get_diff.outputs.image_to_build != ''
    - name: Push Docker Image
      run: |
        IMAGE_TO_BUILD=$(cat diff.txt | grep '^apps/' | awk -F/ '{print $2}' | sort | uniq)
        echo $IMAGE_TO_BUILD

        docker push ${{ env.DOCKERHUB_USERNAME }}/$IMAGE_TO_BUILD:$GITHUB_SHA
      if: |
        github.event_name != 'pull_request' &&
        steps.get_diff.outputs.image_to_build != ''

    - name: create argo application
      if: |
        github.event_name != 'pull_request' &&
        steps.get_diff.outputs.image_to_build != ''
      run: |
        if [ -z "${{env.image_to_build}}" ] && [ -f "charts/${{env.image_to_build}}" ]; then
          echo "file exists"
        else
          echo "file does not exist"
          mkdir -p charts/${{env.image_to_build}} 
          helm template charts/applicationtemplate -s templates/application.yaml --values definition/${{env.image_to_build}}/values.yaml >> charts/root-app/templates/${{env.image_to_build}}.yaml
          git add charts/root-app/templates/${{env.image_to_build}}.yaml
          mkdir -p charts/${{env.image_to_build}}/templates
          helm template charts/applicationtemplate -s templates/chart.yaml --values definition/simpleserver/values.yaml > charts/${{env.image_to_build}}/Chart.yaml
          git add charts/${{env.image_to_build}}/Chart.yaml
        fi
        sed -i 's/tag: .*/tag: '${{ github.sha }}'/g' definition/${{env.image_to_build}}/values.yaml
        #helm template ${{env.image_to_build}} charts/defaultapptemplate --values definition/${{env.image_to_build}}/values.yaml > charts/${{env.image_to_build}}/templates/app.yaml
        #git add charts/${{env.image_to_build}}/templates/app.yaml
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add definition/${{env.image_to_build}}/values.yaml
        git commit -m "update ${{env.image_to_build}} image tag"
        git push
  update:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: get diff from definition file
      id: get_diff
      run: |
        git diff --name-only ${{ github.event.before }} ${{ github.sha }} > diff.txt
        echo "image_to_build=$(cat diff.txt | grep '^definition/' | awk -F/ '{print $2}' | sort | uniq)" >> $GITHUB_OUTPUT
        echo $image_to_build
    - name: Update Helm Chart
      if: |
        steps.get_diff.outputs.image_to_build != ''
      run: |
        git pull
        #git checkout -b update-chart
        #git pull origin update-chart
        helm template charts/applicationtemplate -s templates/application.yaml --values definition/${{env.image_to_build}}/values.yaml > charts/root-app/templates/${{env.image_to_build}}.yaml
        git add charts/root-app/templates/${{env.image_to_build}}.yaml
        git commit -m "update ${{env.image_to_build}} values"
        git push

      
    
