name: build docker image
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKER_KEY }}

jobs:

  get-app-to-build:
    uses: ./.github/workflows/get-modified-files.yaml

  
  build:
    needs: get-app-to-build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: validate image to build
      run: |
        echo ${{  needs.get-app-to-build.outputs.app_to_deploy }}
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}

        
    - name: Build Docker Image
      run: |
        IMAGE_TO_BUILD=${{  needs.get-app-to-build.outputs.app_to_deploy }}
        echo ${{  needs.get-app-to-build.outputs.app_to_deploy }}
        echo "app_to_deploy=$(echo $IMAGE_TO_BUILD)" >> $GITHUB_ENV
        docker build -t ${{ env.DOCKERHUB_USERNAME }}/$IMAGE_TO_BUILD:$GITHUB_SHA -f apps/$IMAGE_TO_BUILD/Dockerfile apps/$IMAGE_TO_BUILD
        sed -i 's/tag: .*/tag: '${{ github.sha }}'/g' definition/$IMAGE_TO_BUILD/values.yaml
      if: |
        needs.get-app-to-build.outputs.app_to_deploy != '' &&
        needs.get-app-to-build.outputs.is_app == 'apps'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKERHUB_USERNAME }}/${{env.app_to_deploy}}:$GITHUB_SHA'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
      if: |
        needs.get-app-to-build.outputs.app_to_deploy != '' &&
        needs.get-app-to-build.outputs.is_app == 'apps'

    - name: Push Docker Image
      run: |
        docker push ${{ env.DOCKERHUB_USERNAME }}/${{env.app_to_deploy}}:$GITHUB_SHA
      if: |
        github.event_name != 'pull_request' &&
        needs.get-app-to-build.outputs.app_to_deploy != '' &&
        needs.get-app-to-build.outputs.is_app == 'apps'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      if:
        github.event_name != 'pull_request' 
      with:
        role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
        aws-region: us-west-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      if:
        github.event_name != 'pull_request' 

    - name: Build, tag, and push docker image to Amazon ECR
      if: |
        github.event_name != 'pull_request' &&
        needs.get-app-to-build.outputs.app_to_deploy != '' &&
        needs.get-app-to-build.outputs.is_app == 'apps'
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ needs.get-app-to-build.outputs.app_to_deploy }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/terraploy/$REPOSITORY:$IMAGE_TAG -f apps/$REPOSITORY/Dockerfile apps/$REPOSITORY
        docker push $REGISTRY/terraploy/$REPOSITORY:$IMAGE_TAG

    - name: create argo application
      env:
        APP_NAME: ${{ needs.get-app-to-build.outputs.app_to_deploy }}
      if: |
        github.event_name != 'pull_request' &&
        needs.get-app-to-build.outputs.app_to_deploy != ''
      run: |
        if [ ! -z "$APP_NAME" ] && [ ! -f "charts/$APP_NAME" ]; then
          echo "file does not exist"
          mkdir -p charts/$APP_NAME 
          helm template charts/applicationtemplate -s templates/application.yaml --values definition/$APP_NAME/values.yaml > charts/root-app/templates/$APP_NAME.yaml
          git add charts/root-app/templates/$APP_NAME.yaml
          mkdir -p charts/$APP_NAME/templates
          helm template charts/applicationtemplate -s templates/chart.yaml --values definition/simpleserver/values.yaml > charts/$APP_NAME/Chart.yaml
          touch charts/$APP_NAME/templates/app.yaml
          git add charts/$APP_NAME/
        fi
        
        #git add charts/$APP_NAME/templates/app.yaml
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git add definition/$APP_NAME/values.yaml
        git diff-index --quiet HEAD || git commit -m "update $APP_NAME image tag"
        git push


  update:
    runs-on: ubuntu-latest
    needs: [get-app-to-build, build]
    if: ${{ always() }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Update Helm Chart
      if: |
        needs.get-app-to-build.outputs.app_to_deploy != ''
      run: |
        git pull
        helm template ${{needs.get-app-to-build.outputs.app_to_deploy}} charts/defaultapptemplate --values definition/${{needs.get-app-to-build.outputs.app_to_deploy}}/values.yaml > charts/${{needs.get-app-to-build.outputs.app_to_deploy}}/templates/app.yaml
        git add charts/${{needs.get-app-to-build.outputs.app_to_deploy}}/templates/app.yaml
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git commit -m "update ${{needs.get-app-to-build.outputs.app_to_deploy}} values"
        git push

      
    
